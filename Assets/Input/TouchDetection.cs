//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/TouchDetection.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchDetection: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchDetection()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchDetection"",
    ""maps"": [
        {
            ""name"": ""Zoom"",
            ""id"": ""bafd21a1-10a0-4310-ac7f-f5ec7b5ec0a2"",
            ""actions"": [
                {
                    ""name"": ""FirstFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3199ab86-3211-44e2-957a-83037a437685"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""90901d24-7d3d-4997-b0f1-479858f7c8d2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondFingerContact"",
                    ""type"": ""Button"",
                    ""id"": ""05b52f4c-8be5-4656-9ebc-74850533036a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""736788ca-f1c6-4173-be01-87292dfefa74"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2861f43d-e7ed-424a-9960-7887449c3e4c"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c8e91d2-ab4f-453d-a750-594a08ac7208"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondFingerContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Zoom
        m_Zoom = asset.FindActionMap("Zoom", throwIfNotFound: true);
        m_Zoom_FirstFingerPosition = m_Zoom.FindAction("FirstFingerPosition", throwIfNotFound: true);
        m_Zoom_SecondFingerPosition = m_Zoom.FindAction("SecondFingerPosition", throwIfNotFound: true);
        m_Zoom_SecondFingerContact = m_Zoom.FindAction("SecondFingerContact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Zoom
    private readonly InputActionMap m_Zoom;
    private List<IZoomActions> m_ZoomActionsCallbackInterfaces = new List<IZoomActions>();
    private readonly InputAction m_Zoom_FirstFingerPosition;
    private readonly InputAction m_Zoom_SecondFingerPosition;
    private readonly InputAction m_Zoom_SecondFingerContact;
    public struct ZoomActions
    {
        private @TouchDetection m_Wrapper;
        public ZoomActions(@TouchDetection wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstFingerPosition => m_Wrapper.m_Zoom_FirstFingerPosition;
        public InputAction @SecondFingerPosition => m_Wrapper.m_Zoom_SecondFingerPosition;
        public InputAction @SecondFingerContact => m_Wrapper.m_Zoom_SecondFingerContact;
        public InputActionMap Get() { return m_Wrapper.m_Zoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZoomActions set) { return set.Get(); }
        public void AddCallbacks(IZoomActions instance)
        {
            if (instance == null || m_Wrapper.m_ZoomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ZoomActionsCallbackInterfaces.Add(instance);
            @FirstFingerPosition.started += instance.OnFirstFingerPosition;
            @FirstFingerPosition.performed += instance.OnFirstFingerPosition;
            @FirstFingerPosition.canceled += instance.OnFirstFingerPosition;
            @SecondFingerPosition.started += instance.OnSecondFingerPosition;
            @SecondFingerPosition.performed += instance.OnSecondFingerPosition;
            @SecondFingerPosition.canceled += instance.OnSecondFingerPosition;
            @SecondFingerContact.started += instance.OnSecondFingerContact;
            @SecondFingerContact.performed += instance.OnSecondFingerContact;
            @SecondFingerContact.canceled += instance.OnSecondFingerContact;
        }

        private void UnregisterCallbacks(IZoomActions instance)
        {
            @FirstFingerPosition.started -= instance.OnFirstFingerPosition;
            @FirstFingerPosition.performed -= instance.OnFirstFingerPosition;
            @FirstFingerPosition.canceled -= instance.OnFirstFingerPosition;
            @SecondFingerPosition.started -= instance.OnSecondFingerPosition;
            @SecondFingerPosition.performed -= instance.OnSecondFingerPosition;
            @SecondFingerPosition.canceled -= instance.OnSecondFingerPosition;
            @SecondFingerContact.started -= instance.OnSecondFingerContact;
            @SecondFingerContact.performed -= instance.OnSecondFingerContact;
            @SecondFingerContact.canceled -= instance.OnSecondFingerContact;
        }

        public void RemoveCallbacks(IZoomActions instance)
        {
            if (m_Wrapper.m_ZoomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IZoomActions instance)
        {
            foreach (var item in m_Wrapper.m_ZoomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ZoomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ZoomActions @Zoom => new ZoomActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IZoomActions
    {
        void OnFirstFingerPosition(InputAction.CallbackContext context);
        void OnSecondFingerPosition(InputAction.CallbackContext context);
        void OnSecondFingerContact(InputAction.CallbackContext context);
    }
}
